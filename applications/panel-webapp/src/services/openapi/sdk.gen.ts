// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import type { AddProductProductsPostData, AddProductProductsPostErrors, AddProductProductsPostResponses, DeleteProductProductsImageIdDeleteData, DeleteProductProductsImageIdDeleteErrors, DeleteProductProductsImageIdDeleteResponses, DeleteProductProductsProductCodeDeleteData, DeleteProductProductsProductCodeDeleteErrors, DeleteProductProductsProductCodeDeleteResponses, GetProductDetailsProductsProductCodeGetData, GetProductDetailsProductsProductCodeGetErrors, GetProductDetailsProductsProductCodeGetResponses, GetProductImageProductsImageIdGetData, GetProductImageProductsImageIdGetErrors, GetProductImageProductsImageIdGetResponses, GetProductsProductsGetData, GetProductsProductsGetResponses, GetProductStatisticsProductsStatisticsGetData, GetProductStatisticsProductsStatisticsGetResponses, UpdateProductProductsProductCodePutData, UpdateProductProductsProductCodePutErrors, UpdateProductProductsProductCodePutResponses, UploadProductVectorsDeepPostData, UploadProductVectorsDeepPostErrors, UploadProductVectorsDeepPostResponses, UploadProductVectorsProductsVectorsPostData, UploadProductVectorsProductsVectorsPostErrors, UploadProductVectorsProductsVectorsPostResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Products
 */
export const getProductsProductsGet = <ThrowOnError extends boolean = false>(options?: Options<GetProductsProductsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProductsProductsGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/products',
        ...options
    });
};

/**
 * Add Product
 */
export const addProductProductsPost = <ThrowOnError extends boolean = false>(options: Options<AddProductProductsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<AddProductProductsPostResponses, AddProductProductsPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Product Statistics
 */
export const getProductStatisticsProductsStatisticsGet = <ThrowOnError extends boolean = false>(options?: Options<GetProductStatisticsProductsStatisticsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProductStatisticsProductsStatisticsGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/products/statistics',
        ...options
    });
};

/**
 * Delete Product
 */
export const deleteProductProductsProductCodeDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProductProductsProductCodeDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteProductProductsProductCodeDeleteResponses, DeleteProductProductsProductCodeDeleteErrors, ThrowOnError>({
        url: '/products/{product_code}',
        ...options
    });
};

/**
 * Get Product Details
 */
export const getProductDetailsProductsProductCodeGet = <ThrowOnError extends boolean = false>(options: Options<GetProductDetailsProductsProductCodeGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProductDetailsProductsProductCodeGetResponses, GetProductDetailsProductsProductCodeGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_code}',
        ...options
    });
};

/**
 * Update Product
 */
export const updateProductProductsProductCodePut = <ThrowOnError extends boolean = false>(options: Options<UpdateProductProductsProductCodePutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateProductProductsProductCodePutResponses, UpdateProductProductsProductCodePutErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_code}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upload Product Vectors
 */
export const uploadProductVectorsProductsVectorsPost = <ThrowOnError extends boolean = false>(options: Options<UploadProductVectorsProductsVectorsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<UploadProductVectorsProductsVectorsPostResponses, UploadProductVectorsProductsVectorsPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        url: '/products-vectors',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Upload Product Vectors
 */
export const uploadProductVectorsDeepPost = <ThrowOnError extends boolean = false>(options: Options<UploadProductVectorsDeepPostData, ThrowOnError>) => {
    return (options.client ?? client).post<UploadProductVectorsDeepPostResponses, UploadProductVectorsDeepPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        url: '/deep',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Delete Product
 */
export const deleteProductProductsImageIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProductProductsImageIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteProductProductsImageIdDeleteResponses, DeleteProductProductsImageIdDeleteErrors, ThrowOnError>({
        url: '/products/image/{id}',
        ...options
    });
};

/**
 * Get Product Image
 */
export const getProductImageProductsImageIdGet = <ThrowOnError extends boolean = false>(options: Options<GetProductImageProductsImageIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProductImageProductsImageIdGetResponses, GetProductImageProductsImageIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/image/{id}',
        ...options
    });
};
